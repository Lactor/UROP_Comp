
# using terminal arguments for the input file and the data folder.
import sys
import glob
import math
import numpy as np
import matplotlib.pyplot as plt
import cosmocalc


def get_number( file_name):
    TEMPLATE = "file_"
    file_name = file_name.split("/")[-1]
    number_index = file_name.find(TEMPLATE) + len(TEMPLATE)
    if number_index == len(TEMPLATE) -1:
        return file_name.split(".")[0]
    number = 0
    while file_name[number_index].isdigit():
        number*=10
        number+= int(file_name[number_index])
        number_index +=1
    return str(number)


def norm( sim_fl, data_fl, data_err):
    alpha = np.sum(  data_fl**2/data_err)
    gamma = np.sum(sim_fl**2 / data_err)
    
    a = np.sqrt(gamma/alpha)

    return a

data_folder = sys.argv[1]
input_file_names = sys.argv[2:]
input_files_data = []

###################################################################
#
#           LOAD FILES
#
###################################################################

doNotAdd = False #For files with problems in the values
for i in range(len(input_file_names)):

    data = {"red": -1 } 
    #data dictionary redshift - red
    #wavelengths -wl ; flux - fl; error - err
    input_file = open(input_file_names[i], "r")
    redshift = -1
    temp_wl = []
    temp_fl = []
    temp_err = []
    for line in input_file:
        values = line.split(' ')

        if data['red'] ==-1:
            data['red'] = float(values[0])
            #Redshift is the first value of the file
        else:
            if (float(values[2]) > 0):
                temp_wl.append( float(values[0])/(1+data['red']))
                temp_fl.append( float(values[1]))
                temp_err.append( float(values[2]))

            if len(temp_fl)>1 and temp_fl[-1] <= 0:
                doNotAdd = True

    if doNotAdd == False:
        data['wl'] = np.array(temp_wl)
        data['fl'] = np.array(temp_fl)
        data['err'] = np.array(temp_err)

        input_files_data.append(data)
        
    #DEBUG
    #print(data['red'])
    #for i in range(len(data['wl'])):
        #print('%.5e %.5e %.5e\n' %(data['wl'][i], data['fl'][i], data['err'][i]))

###################################################################
#
#           TRANSFORM INTO ABSOLUTE MAGNITUDES
#
###################################################################


for k in range(len(input_files_data)):

    dist = (cosmocalc.cosmocalc( input_files_data[k]['red'], H0=70.4, WM=0.2726, WV=0.7274))['DL_Mpc']
        #Calculate modulus distance
    dist *= 1e6
        #transform into parsecs
    modulus_distance = 5.0 * (math.log10(dist) - 1.0)
        #Calculate modulus distance

        #DEBUG
    #print("DIST: " + str(dist))
    #print("MOD_DIST: " + str(modulus_distance)) 


        
        #print("FLUX (microJs): " +str(data['fl'][i]))
        
    input_files_data[k]['err'] = 2.5 * input_files_data[k]['err'] / input_files_data[k]['fl']
          #Error from the transformation of luminosity to magnitude
          
    input_files_data[k]['fl'] = 23.9 - 2.5* np.log10(input_files_data[k]['fl'] )
           # Int Into AB magnitude
    
        #print("Apparent AB mag: %.5e" % (input_files_data[k]['fl'][i]))

    input_files_data[k]['fl'] -= modulus_distance 
             #Into absolute magn

        #print('%.5e %.5e'% (input_files_data[k]['fl'][i], input_files_data[k]['err'][i]))
        #print(" ")


###################################################################
#
#            LOAD AND COMPARE TO EACH SIMULATION FILE
#
###################################################################

data_files = glob.glob(data_folder+"/"+ "*.txt")

results = []
for i in range(len(input_files_data)):
    results.append([])

data_comp_wl = []
    #only need to keep one wavelength file for all comparison files
have_wl = False

print_one_file = False
print_one_data = False

for file_data in data_files:
    #Load comparison file to an array
    #Files have already been changed to be in absolute magnitude
    #From there make the comparisons
    #LOAD FILE
    
    print(file_data)

    data_comp_file = open(file_data, "r")
    data_comp = [] 
    
    for line in data_comp_file:
        values = line.split(' ')
        if not have_wl:
            data_comp_wl.append( float( values[0]))
            #print("FILE WL Added: " +str(data_comp_wl[-1]) )
            
        data_comp.append( float(values[1]))
    have_wl = True
        
    #STAR COMPARISON

    for k in range(len(input_files_data)):
        
        #For each file do a comparison 
        #print(k, " ", input_file_names[k])
        chi_2 = 0
        index = 0
        int_comp = 0
    
        #VECTORIZATION OF DATA
        file_data_fl = np.zeros(len(input_files_data[k]['wl']))

        for i in range(len(input_files_data[k]['wl'])):
    
            while input_files_data[k]['wl'][i] < data_comp_wl[0]: 
                i+=1          
                print("DATA WL TOO SMALL")
                #we do not have information to calculate these so we skip

            if input_files_data[k]['wl'][i] > data_comp_wl[-1]:
                i = len(input_files_data[k]['wl'])
                print("DATA WL TOO BIG")
                break 
                # we can stop the loop here since the data points cannot be compared

            while (index + 1) < len(data_comp_wl) and data_comp_wl[index +1] <= input_files_data[k]['wl'][i]:
                index+=1
                #choose the correct index to make the comparison
            file_data_fl[i] = (data_comp[index+1]-data_comp[index])/(data_comp_wl[index+1] - data_comp_wl[index])*(input_files_data[k]['wl'][i] - data_comp_wl[index]) + data_comp[index]
            int_comp +=1
        
        norm_const = norm(file_data_fl, input_files_data[k]['fl'], input_files_data[k]['err'])
        print("NORM CONST: ", norm_const)
        norm_data_fl = input_files_data[k]['fl']*norm_const
        norm_data_err = input_files_data[k]['err']*norm_const

        chi_2 = np.sum( (norm_data_fl - file_data_fl)**2/norm_data_err)            
        chi_2 /= int_comp #normalizes the chi_2 by the number of comparisons
        if int_comp != len(input_files_data[k]['fl']):
            print("ERRROR NOT ALL COMPARED")
        results[k].append( [chi_2, file_data])


###################################################################
#
#               PRINT RESULTS TO FILE
#
###################################################################

#print(badfiles)

for k in range(len(input_files_data)):
    results[k].sort()
    if( results[k][0][0]< 1):
        print(input_file_names[k])
    output = open("Results_GAMA_vec_norm/"+str(get_number(input_file_names[k]))+ ".out", "w") 
        #Open file
        
    for i in range(len(results[k])):
        output.write(str(get_number(results[k][i][1])) + " " + str(results[k][i][0])+"\n")
            
